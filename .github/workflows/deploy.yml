name: 🚀 Deploy
on:
  push:
    branches:
      - main
      - dev
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: ⬣ ESLint
    runs-on: ubuntu-22.04
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: 📥 Download deps
        uses: bahmutov/npm-install@v1

      - name: 🖼 Build icons
        run: npm run build:icons

      - name: 🔬 Lint
        run: npm run lint

  typecheck:
    name: ʦ TypeScript
    runs-on: ubuntu-22.04
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: 📥 Download deps
        uses: bahmutov/npm-install@v1

      - name: 🖼 Build icons
        run: npm run build:icons

      - name: 🔎 Type check
        run: npm run typecheck --if-present

  vitest:
    name: ⚡ Vitest
    runs-on: ubuntu-22.04
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: 📥 Download deps
        uses: bahmutov/npm-install@v1

      - name: 🏄 Copy test env vars
        run: cp .env.example .env

      - name: 🖼 Build icons
        run: npm run build:icons

      - name: ⚡ Run vitest
        run: npm run test -- --coverage

# @todo find a way to run tests wth playwright, as we need a database
#  maybe something like this: https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers
#  playwright:
#    name: 🎭 Playwright
#    runs-on: ubuntu-22.04
#    timeout-minutes: 60
#    steps:
#      - name: ⬇️ Checkout repo
#        uses: actions/checkout@v3
#
#      - name: 🏄 Copy test env vars
#        run: cp .env.example .env
#
#      - name: ⎔ Setup node
#        uses: actions/setup-node@v3
#        with:
#          node-version: 20
#
#      - name: 📥 Download deps
#        uses: bahmutov/npm-install@v1
#
#      - name: 📥 Install Playwright Browsers
#        run: npm run test:e2e:install
#
#      - name: 🛠 Setup Database
#        run: npx prisma migrate deploy
#
#      - name: 🏦 Cache Database
#        id: db-cache
#        uses: actions/cache@v3
#        with:
#          path: prisma/data.db
#          key:
#            db-cache-schema_${{ hashFiles('./prisma/schema.prisma')
#            }}-migrations_${{ hashFiles('./prisma/migrations/*/migration.sql')
#            }}
#
#      - name: 🌱 Seed Database
#        if: steps.db-cache.outputs.cache-hit != 'true'
#        run: npx prisma db seed
#        env:
#          MINIMAL_SEED: true
#
#      - name: 🏗 Build
#        run: npm run build
#
#      - name: 🎭 Playwright tests
#        run: npx playwright test
#
#      - name: 📊 Upload report
#        uses: actions/upload-artifact@v3
#        if: always()
#        with:
#          name: playwright-report
#          path: playwright-report/
#          retention-days: 30

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-22.04
    needs: [lint, typecheck, vitest]
    # only build/deploy branches on pushes
    if: ${{ github.event_name == 'push' }}

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      # move Dockerfile to root
      - name: 🚚 Move Dockerfile
        run: |
          mv ./other/Dockerfile ./Dockerfile
          mv ./other/.dockerignore ./.dockerignore

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-   

      - name: Get current Unix timestamp
        id: timestamp
        run: |
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV            

      - name: 🚀 Deploy Preview
        if: ${{ github.ref == 'refs/heads/dev' }}
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:preview-${{ env.TIMESTAMP }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: 🚀 Deploy Production
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ env.TIMESTAMP }}
          labels: ${{ steps.meta.outputs.labels }}
